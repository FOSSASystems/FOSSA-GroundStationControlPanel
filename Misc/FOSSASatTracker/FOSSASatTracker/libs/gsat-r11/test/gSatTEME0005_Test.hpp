/*
 * gSaTEME_Test.hpp
 *
 *  Created on: 27/07/2010
 *      Author: cdeveloper
 */

#ifndef GSATEME0005_TEST_HPP_
#define GSATEME0005_TEST_HPP_

#include <cppunit/extensions/HelperMacros.h>
#include <string.h>
#include <math.h>

#include "gSatTEME.hpp"
#include "gVector.hpp"


#include <iostream>
#include <iomanip>


class gSatTEME0005_Test: public CppUnit::TestFixture{
CPPUNIT_TEST_SUITE(gSatTEME0005_Test);
CPPUNIT_TEST(test0);
CPPUNIT_TEST(test360);
CPPUNIT_TEST(test720);
CPPUNIT_TEST(test1080);
CPPUNIT_TEST(test1440);
CPPUNIT_TEST(test2160);
CPPUNIT_TEST(test2520);
CPPUNIT_TEST(test2880);
CPPUNIT_TEST(test3240);
CPPUNIT_TEST(test3600);
CPPUNIT_TEST(test3960);
CPPUNIT_TEST(test4320);
CPPUNIT_TEST(testTime0);
CPPUNIT_TEST(testTime360);
CPPUNIT_TEST(testTime720);
CPPUNIT_TEST_SUITE_END();

private:
	gSatTEME *pSatellite;
	gVector Position;
	gVector Vel;
	char pstrTleLine1[130];
	char pstrTleLine2[130];

	gTime Epoch;

public:
	void setUp(){
		  strcpy (pstrTleLine1,"1 00005U 58002B   00179.78495062  .00000023  00000-0  28098-4 0  4753");
		  strcpy (pstrTleLine2,"2 00005  34.2682 348.7242 1859667 331.7664  19.3264 10.82419157413667");

		  pSatellite = new gSatTEME("TEST1", pstrTleLine1, pstrTleLine2);
		  Epoch.setTime(2000, 179.78495062);
	}

	void tearDown(){
		delete pSatellite;
	}
	 inline std::string stringify(double x)
	 {
	   std::ostringstream o;
	   o << x;
	   return o.str();
	 }

	 inline double dblFix(double x, int precision){

		 return (double)(x/pow(10,precision));
	 }

	void test0(){
		pSatellite->setMinSinceKepEpoch( (double)0);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],7022.46529266, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1],-1400.08296755, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 0.03995155, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 1.893841015, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], 6.405893759, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 4.534807250, 0.000000001);
	}

	void test360(){
		pSatellite->setMinSinceKepEpoch( (double)360);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],-7154.03120202, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1],-3783.17682504, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -3536.19412294, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 4.741887409, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -4.151817765, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.093935425, 0.000000001);
	}

	void test720(){
		pSatellite->setMinSinceKepEpoch( (double)720);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -7134.59340119, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 6531.68641334, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 3260.27186483, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -4.113793027, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -2.911922039, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.557327851, 0.000000001);
	}


	void test1080(){
		pSatellite->setMinSinceKepEpoch( (double)1080);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], 5568.53901181, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 4492.06992591, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 3863.87641983, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -4.209106476, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], 5.159719888, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 2.744852980, 0.000000001);
	}

	void test1440(){
		pSatellite->setMinSinceKepEpoch( (double)1440);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -938.55923943, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], -6268.18748831, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -4294.02924751, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 7.536105209, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -0.427127707, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 0.989878080, 0.000000001);
	}

	void test1800(){
		pSatellite->setMinSinceKepEpoch( (double)1800);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -9680.56121728, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1],  2802.47771354, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2],   124.10688038, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -4.659467970, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -0.427127707, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -3.227347517, 0.000000001);
	}
	
	void test2160(){
		pSatellite->setMinSinceKepEpoch( (double)2160);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],  190.19796988, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 7746.96653614, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 5110.00675412, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -6.112325142, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1],  1.527008184, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -0.139152358, 0.000000001);
	}
	
	
	void test2520(){
		pSatellite->setMinSinceKepEpoch( (double)2520);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],  5579.55640116, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], -3995.61396789, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -1518.82108966, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 4.767927483, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], 5.123185301, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 4.276837355, 0.000000001);
	}
	
	void test2880(){
		pSatellite->setMinSinceKepEpoch( (double)2880);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],  -8650.73082219, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], -1914.93811525, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -3007.03603443, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 3.067165127, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -4.828384068, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.515322836, 0.000000001);
	}
	
	void test3240(){
		pSatellite->setMinSinceKepEpoch( (double)3240);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],  -5429.79204164, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 7574.36493792, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 3747.39305236, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -4.999442110, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -1.800561422, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.229392830, 0.000000001);
	}

	void test3600(){
		pSatellite->setMinSinceKepEpoch( (double)3600);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],  6759.04583722, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 2001.58198220, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 2783.55192533, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -2.180993947, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], 6.402085603, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 3.644723952, 0.000000001);
	}

	void test3960(){
		pSatellite->setMinSinceKepEpoch( (double)3960);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -3791.44531559, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], -5712.95617894, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -4533.48630714, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 6.668817493, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -2.516382327, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -0.082384354, 0.000000001);
	}

	void test4320(){
		pSatellite->setMinSinceKepEpoch( (double)4320);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -9060.47373569, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 4658.70952502, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 813.68673153, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -2.232832783, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -4.110453490, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -3.157345433, 0.000000001);
	}





	void testTime0(){

		pSatellite->setEpoch( Epoch);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],7022.46529266, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1],-1400.08296755, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 0.03995155, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 1.893841015, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], 6.405893759, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], 4.534807250, 0.000000001);
	}

	void testTime360(){

		gTimeSpan timeSpan( (double)(360.0 / KMIN_PER_DAY));
		gTime  diffEpoch = Epoch + timeSpan;
		pSatellite->setEpoch( diffEpoch);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0],-7154.03120202, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1],-3783.17682504, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], -3536.19412294, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], 4.741887409, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -4.151817765, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.093935425, 0.000000001);
	}
	void testTime720(){
		gTimeSpan timeSpan( (double)(720.0 / KMIN_PER_DAY));
		gTime  diffEpoch = Epoch + timeSpan;
		pSatellite->setEpoch( diffEpoch);
		Position = pSatellite->getPos();
		Vel      = pSatellite->getVel();


		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[0], -7134.59340119, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[1], 6531.68641334, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Position[2], 3260.27186483, 0.00000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[0], -4.113793027, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[1], -2.911922039, 0.000000001);
		CPPUNIT_ASSERT_DOUBLES_EQUAL(Vel[2], -2.557327851, 0.000000001);
	}

};






#endif /* GSATEME_TEST_HPP_ */
